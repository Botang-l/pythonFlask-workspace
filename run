#!/bin/bash

set -e

cd "$(dirname "$0")"

IMAGE_NAME="ith-workspace"
CONTAINER_NAME="ITH-workspace"
NAME="$(id -un)"
NAME=${NAME// /}

VOLUME_PROJECTS_DIR="${PWD}/projects/"
VOLUME_SSH_DIR="${PWD}/temp/.ssh/"
VOLUME_NGROK_CONFIG_DIR="${PWD}/temp/ngrok/"
VOLUME_VSCODESERVER_DIR="${PWD}/temp/.vscode-server/"

DEV_PORT_1="5000"
DEV_PORT_2="5001"
SSH_PORT="5010"

usage_message() {
    cat <<EOF

    This script will help you manage the docker workspace of the ITH project.
    You can execute this script with the following options.

    --start     : build and enter the workspace
    --stop      : stop and exit the workspace
    --prune     : remove the docker image
    --rebuild   : remove and build a new image to apply new changes

EOF
}

start_environment() {
    if [[ "$(docker images -q ${IMAGE_NAME})" == "" ]]; then
        docker build \
            --build-arg UID="$(id -u)" \
            --build-arg GID="$(id -g)" \
            --build-arg NAME="${NAME}" \
            -t ${IMAGE_NAME} . ||
            { echo "error due to docker build image" && exit 1; }

        case ${OSTYPE} in
        msys)
            [[ -f ~/.ssh/known_hosts ]] && sed -i "/\[127.0.0.1\]:${SSH_PORT}/d" ~/.ssh/known_hosts
            ;;
        linux-gnu)
            [[ -f ~/.ssh/known_hosts ]] && ssh-keygen -f ~/.ssh/known_hosts -R "[127.0.0.1]:${SSH_PORT}" >/dev/null
            ;;
        *)
            [[ -f ~/.ssh/known_hosts ]] && ssh-keygen -f ~/.ssh/known_hosts -R "[127.0.0.1]:${SSH_PORT}" >/dev/null
            ;;
        esac
    fi

    [[ -d ${VOLUME_SSH_DIR} ]] || mkdir -p "${VOLUME_SSH_DIR}"
    [[ -d ${VOLUME_PROJECTS_DIR} ]] || mkdir -p "${VOLUME_PROJECTS_DIR}"
    [[ -d ${VOLUME_NGROK_CONFIG_DIR} ]] || mkdir -p "${VOLUME_NGROK_CONFIG_DIR}"
    [[ -d ${VOLUME_VSCODESERVER_DIR} ]] || mkdir -p "${VOLUME_VSCODESERVER_DIR}"

    if [[ "$(docker ps | grep ${CONTAINER_NAME})" == "" ]]; then
        docker run -d \
            -v "$([[ ${OSTYPE} == "msys" ]] && echo /"${VOLUME_PROJECTS_DIR}" || echo "${VOLUME_PROJECTS_DIR}")":/home/"${NAME}"/projects/ \
            -v "$([[ ${OSTYPE} == "msys" ]] && echo /"${VOLUME_VSCODESERVER_DIR}" || echo "${VOLUME_VSCODESERVER_DIR}")":/home/"${NAME}"/.vscode-server/ \
            -v "$([[ ${OSTYPE} == "msys" ]] && echo /"${VOLUME_NGROK_CONFIG_DIR}" || echo "${VOLUME_NGROK_CONFIG_DIR}")":/home/"${NAME}"/.config/ngrok/ \
            -v "$([[ ${OSTYPE} == "msys" ]] && echo /"${VOLUME_SSH_DIR}" || echo "${VOLUME_SSH_DIR}")":/home/"${NAME}"/.ssh/ \
            -p ${SSH_PORT}:22 \
            -p ${DEV_PORT_1}:5000 \
            -p ${DEV_PORT_2}:5001 \
            -e EXPOSE_DEV_PORT_1=${DEV_PORT_1} \
            -e EXPOSE_DEV_PORT_2=${DEV_PORT_2} \
            -e EXPOSE_SSH_PORT=${SSH_PORT} \
            -u "${NAME}" \
            -h ${CONTAINER_NAME} \
            --name ${CONTAINER_NAME} \
            ${IMAGE_NAME} ||
            { echo "error due to docker run image" && exit 1; }
    fi

    if [ "${OSTYPE}" == "msys" ]; then
        winpty docker exec -it ${CONTAINER_NAME} bash
    else
        docker exec -it ${CONTAINER_NAME} bash
    fi

    clear
}

stop_docker_container() {
    if [[ "$(docker ps -a | grep ${CONTAINER_NAME})" != "" ]]; then
        docker container rm -f ${CONTAINER_NAME}
    fi
}

remove_docker_image() {
    if [[ "$(docker images -q ${IMAGE_NAME})" != "" ]]; then
        docker rmi ${IMAGE_NAME}
    fi
}

export DOCKER_SCAN_SUGGEST=false

[[ $(
    docker ps >/dev/null 2>&1
    echo $?
) != 0 ]] && echo "error: please install and start Docker Engine first!!!" && exit 1

case $1 in
--start)
    start_environment
    ;;
--stop)
    stop_docker_container
    ;;
--prune)
    stop_docker_container
    remove_docker_image
    ;;
--rebuild)
    stop_docker_container
    remove_docker_image
    start_environment
    ;;
*)
    usage_message
    ;;
esac
